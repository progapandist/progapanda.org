{"id":"../node_modules/xterm/lib/handlers/Clipboard.js","dependencies":[{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/handlers/Clipboard.js.map","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/src/handlers/Clipboard.ts","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/package.json","includedInParent":true,"mtime":1587223993374},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/package.json","includedInParent":true,"mtime":1587222920480}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction prepareTextForClipboard(text) {\n    var space = String.fromCharCode(32), nonBreakingSpace = String.fromCharCode(160), allNonBreakingSpaces = new RegExp(nonBreakingSpace, 'g'), processedText = text.split('\\n').map(function (line) {\n        var processedLine = line.replace(/\\s+$/g, '').replace(allNonBreakingSpaces, space);\n        return processedLine;\n    }).join('\\n');\n    return processedText;\n}\nexports.prepareTextForClipboard = prepareTextForClipboard;\nfunction prepareTextForTerminal(text, isMSWindows) {\n    if (isMSWindows) {\n        return text.replace(/\\r?\\n/g, '\\n');\n    }\n    return text;\n}\nexports.prepareTextForTerminal = prepareTextForTerminal;\nfunction copyHandler(ev, term) {\n    var copiedText = window.getSelection().toString(), text = prepareTextForClipboard(copiedText);\n    if (term.browser.isMSIE) {\n        window.clipboardData.setData('Text', text);\n    }\n    else {\n        ev.clipboardData.setData('text/plain', text);\n    }\n    ev.preventDefault();\n}\nexports.copyHandler = copyHandler;\nfunction pasteHandler(ev, term) {\n    ev.stopPropagation();\n    var text;\n    var dispatchPaste = function (text) {\n        text = prepareTextForTerminal(text, term.browser.isMSWindows);\n        term.handler(text);\n        term.textarea.value = '';\n        term.emit('paste', text);\n        return term.cancel(ev);\n    };\n    if (term.browser.isMSIE) {\n        if (window.clipboardData) {\n            text = window.clipboardData.getData('Text');\n            dispatchPaste(text);\n        }\n    }\n    else {\n        if (ev.clipboardData) {\n            text = ev.clipboardData.getData('text/plain');\n            dispatchPaste(text);\n        }\n    }\n}\nexports.pasteHandler = pasteHandler;\nfunction rightClickHandler(ev, term) {\n    var s = document.getSelection(), selectedText = prepareTextForClipboard(s.toString()), clickIsOnSelection = false, x = ev.clientX, y = ev.clientY;\n    if (s.rangeCount) {\n        var r = s.getRangeAt(0), cr = r.getClientRects();\n        for (var i = 0; i < cr.length; i++) {\n            var rect = cr[i];\n            clickIsOnSelection = ((x > rect.left) && (x < rect.right) &&\n                (y > rect.top) && (y < rect.bottom));\n            if (clickIsOnSelection) {\n                break;\n            }\n        }\n        if (selectedText.match(/^\\s$/) || !selectedText.length) {\n            clickIsOnSelection = false;\n        }\n    }\n    if (!clickIsOnSelection) {\n        term.textarea.style.position = 'fixed';\n        term.textarea.style.width = '20px';\n        term.textarea.style.height = '20px';\n        term.textarea.style.left = (x - 10) + 'px';\n        term.textarea.style.top = (y - 10) + 'px';\n        term.textarea.style.zIndex = '1000';\n        term.textarea.focus();\n        setTimeout(function () {\n            term.textarea.style.position = null;\n            term.textarea.style.width = null;\n            term.textarea.style.height = null;\n            term.textarea.style.left = null;\n            term.textarea.style.top = null;\n            term.textarea.style.zIndex = null;\n        }, 4);\n    }\n}\nexports.rightClickHandler = rightClickHandler;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/handlers/Clipboard.ts"],"names":[],"mappings":";;AAyBA,iCAAwC,IAAY;IAClD,IAAI,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,EAC/B,gBAAgB,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,EAC3C,oBAAoB,GAAG,IAAI,MAAM,CAAC,gBAAgB,EAAE,GAAG,CAAC,EACxD,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI;QAGjD,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAEnF,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAElB,MAAM,CAAC,aAAa,CAAC;AACvB,CAAC;AAbD,0DAaC;AAMD,gCAAuC,IAAY,EAAE,WAAoB;IACvE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AALD,wDAKC;AAMD,qBAA4B,EAAkB,EAAE,IAAe;IAG7D,IAAI,UAAU,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,EAC7C,IAAI,GAAG,uBAAuB,CAAC,UAAU,CAAC,CAAC;IAE/C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,EAAE,CAAC,cAAc,EAAE,CAAC;AACtB,CAAC;AAbD,kCAaC;AAOD,sBAA6B,EAAkB,EAAE,IAAe;IAC9D,EAAE,CAAC,eAAe,EAAE,CAAC;IAErB,IAAI,IAAY,CAAC;IAEjB,IAAI,aAAa,GAAG,UAAS,IAAI;QAC/B,IAAI,GAAG,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;YACzB,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC5C,aAAa,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YACrB,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9C,aAAa,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;AACH,CAAC;AAzBD,oCAyBC;AAeD,2BAAkC,EAAc,EAAE,IAAe;IAC/D,IAAI,CAAC,GAAG,QAAQ,CAAC,YAAY,EAAE,EAC3B,YAAY,GAAG,uBAAuB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,EACpD,kBAAkB,GAAG,KAAK,EAC1B,CAAC,GAAG,EAAE,CAAC,OAAO,EACd,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC;IAEnB,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EACnB,EAAE,GAAG,CAAC,CAAC,cAAc,EAAE,CAAC;QAE5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YAEjB,kBAAkB,GAAG,CACnB,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;gBACnC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CACpC,CAAC;YAEF,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACvB,KAAK,CAAC;YACR,CAAC;QACH,CAAC;QAKD,EAAE,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACvD,kBAAkB,GAAG,KAAK,CAAC;QAC7B,CAAC;IACH,CAAC;IAGD,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAGtB,UAAU,CAAC;YACT,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;YACpC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;YACjC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpC,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;AACH,CAAC;AApDD,8CAoDC","file":"Clipboard.js","sourceRoot":"..","sourcesContent":["/**\n * Clipboard handler module: exports methods for handling all clipboard-related events in the\n * terminal.\n * @module xterm/handlers/Clipboard\n * @license MIT\n */\n\nimport { ITerminal } from '../Interfaces';\n\ninterface IWindow extends Window {\n  clipboardData?: {\n    getData(format: string): string;\n    setData(format: string, data: string);\n  };\n}\n\ndeclare var window: IWindow;\n\n/**\n * Prepares text copied from terminal selection, to be saved in the clipboard by:\n *   1. stripping all trailing white spaces\n *   2. converting all non-breaking spaces to regular spaces\n * @param {string} text The copied text that needs processing for storing in clipboard\n * @returns {string}\n */\nexport function prepareTextForClipboard(text: string): string {\n  let space = String.fromCharCode(32),\n      nonBreakingSpace = String.fromCharCode(160),\n      allNonBreakingSpaces = new RegExp(nonBreakingSpace, 'g'),\n      processedText = text.split('\\n').map(function (line) {\n        // Strip all trailing white spaces and convert all non-breaking spaces\n        // to regular spaces.\n        let processedLine = line.replace(/\\s+$/g, '').replace(allNonBreakingSpaces, space);\n\n        return processedLine;\n      }).join('\\n');\n\n  return processedText;\n}\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string, isMSWindows: boolean): string {\n  if (isMSWindows) {\n    return text.replace(/\\r?\\n/g, '\\n');\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param {ClipboardEvent} ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, term: ITerminal) {\n  // We cast `window` to `any` type, because TypeScript has not declared the `clipboardData`\n  // property that we use below for Internet Explorer.\n  let copiedText = window.getSelection().toString(),\n      text = prepareTextForClipboard(copiedText);\n\n  if (term.browser.isMSIE) {\n    window.clipboardData.setData('Text', text);\n  } else {\n    ev.clipboardData.setData('text/plain', text);\n  }\n\n  ev.preventDefault(); // Prevent or the original text will be copied.\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param {ClipboardEvent} ev The original paste event to be handled\n * @param {Terminal} term The terminal on which to apply the handled paste event\n */\nexport function pasteHandler(ev: ClipboardEvent, term: ITerminal) {\n  ev.stopPropagation();\n\n  let text: string;\n\n  let dispatchPaste = function(text) {\n    text = prepareTextForTerminal(text, term.browser.isMSWindows);\n    term.handler(text);\n    term.textarea.value = '';\n    term.emit('paste', text);\n\n    return term.cancel(ev);\n  };\n\n  if (term.browser.isMSIE) {\n    if (window.clipboardData) {\n      text = window.clipboardData.getData('Text');\n      dispatchPaste(text);\n    }\n  } else {\n    if (ev.clipboardData) {\n      text = ev.clipboardData.getData('text/plain');\n      dispatchPaste(text);\n    }\n  }\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n *\n * **Logic**\n * If text is selected and right-click happens on selected text, then\n * do nothing to allow seamless copying.\n * If no text is selected or right-click is outside of the selection\n * area, then bring the terminal's input below the cursor, in order to\n * trigger the event on the textarea and allow-right click paste, without\n * caring about disappearing selection.\n * @param {MouseEvent} ev The original right click event to be handled\n * @param {Terminal} term The terminal on which to apply the handled paste event\n */\nexport function rightClickHandler(ev: MouseEvent, term: ITerminal) {\n  let s = document.getSelection(),\n      selectedText = prepareTextForClipboard(s.toString()),\n      clickIsOnSelection = false,\n      x = ev.clientX,\n      y = ev.clientY;\n\n  if (s.rangeCount) {\n    let r = s.getRangeAt(0),\n        cr = r.getClientRects();\n\n    for (let i = 0; i < cr.length; i++) {\n      let rect = cr[i];\n\n      clickIsOnSelection = (\n        (x > rect.left) && (x < rect.right) &&\n        (y > rect.top) && (y < rect.bottom)\n      );\n\n      if (clickIsOnSelection) {\n        break;\n      }\n    }\n    // If we clicked on selection and selection is not a single space,\n    // then mark the right click as copy-only. We check for the single\n    // space selection, as this can happen when clicking on an &nbsp;\n    // and there is not much pointing in copying a single space.\n    if (selectedText.match(/^\\s$/) || !selectedText.length) {\n      clickIsOnSelection = false;\n    }\n  }\n\n  // Bring textarea at the cursor position\n  if (!clickIsOnSelection) {\n    term.textarea.style.position = 'fixed';\n    term.textarea.style.width = '20px';\n    term.textarea.style.height = '20px';\n    term.textarea.style.left = (x - 10) + 'px';\n    term.textarea.style.top = (y - 10) + 'px';\n    term.textarea.style.zIndex = '1000';\n    term.textarea.focus();\n\n    // Reset the terminal textarea's styling\n    setTimeout(function () {\n      term.textarea.style.position = null;\n      term.textarea.style.width = null;\n      term.textarea.style.height = null;\n      term.textarea.style.left = null;\n      term.textarea.style.top = null;\n      term.textarea.style.zIndex = null;\n    }, 4);\n  }\n}\n"]}},"error":null,"hash":"ebe37f2057a186d6931dd70eea8ee68d","cacheData":{"env":{}}}