{"id":"../node_modules/xterm/lib/Viewport.js","dependencies":[{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Viewport.js.map","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/src/Viewport.ts","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/package.json","includedInParent":true,"mtime":1587223993374},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/package.json","includedInParent":true,"mtime":1586604134482}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Viewport = (function () {\n    function Viewport(terminal, viewportElement, scrollArea, charMeasure) {\n        var _this = this;\n        this.terminal = terminal;\n        this.viewportElement = viewportElement;\n        this.scrollArea = scrollArea;\n        this.charMeasure = charMeasure;\n        this.currentRowHeight = 0;\n        this.lastRecordedBufferLength = 0;\n        this.lastRecordedViewportHeight = 0;\n        this.terminal.on('scroll', this.syncScrollArea.bind(this));\n        this.terminal.on('resize', this.syncScrollArea.bind(this));\n        this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\n        setTimeout(function () { return _this.syncScrollArea(); }, 0);\n    }\n    Viewport.prototype.refresh = function () {\n        if (this.charMeasure.height > 0) {\n            var rowHeightChanged = this.charMeasure.height !== this.currentRowHeight;\n            if (rowHeightChanged) {\n                this.currentRowHeight = this.charMeasure.height;\n                this.viewportElement.style.lineHeight = this.charMeasure.height + 'px';\n                this.terminal.rowContainer.style.lineHeight = this.charMeasure.height + 'px';\n            }\n            var viewportHeightChanged = this.lastRecordedViewportHeight !== this.terminal.rows;\n            if (rowHeightChanged || viewportHeightChanged) {\n                this.lastRecordedViewportHeight = this.terminal.rows;\n                this.viewportElement.style.height = this.charMeasure.height * this.terminal.rows + 'px';\n            }\n            this.scrollArea.style.height = (this.charMeasure.height * this.lastRecordedBufferLength) + 'px';\n        }\n    };\n    Viewport.prototype.syncScrollArea = function () {\n        if (this.lastRecordedBufferLength !== this.terminal.lines.length) {\n            this.lastRecordedBufferLength = this.terminal.lines.length;\n            this.refresh();\n        }\n        else if (this.lastRecordedViewportHeight !== this.terminal.rows) {\n            this.refresh();\n        }\n        else {\n            if (this.charMeasure.height !== this.currentRowHeight) {\n                this.refresh();\n            }\n        }\n        var scrollTop = this.terminal.ydisp * this.currentRowHeight;\n        if (this.viewportElement.scrollTop !== scrollTop) {\n            this.viewportElement.scrollTop = scrollTop;\n        }\n    };\n    Viewport.prototype.onScroll = function (ev) {\n        var newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\n        var diff = newRow - this.terminal.ydisp;\n        this.terminal.scrollDisp(diff, true);\n    };\n    Viewport.prototype.onWheel = function (ev) {\n        if (ev.deltaY === 0) {\n            return;\n        }\n        var multiplier = 1;\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n            multiplier = this.currentRowHeight;\n        }\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n            multiplier = this.currentRowHeight * this.terminal.rows;\n        }\n        this.viewportElement.scrollTop += ev.deltaY * multiplier;\n        ev.preventDefault();\n    };\n    ;\n    return Viewport;\n}());\nexports.Viewport = Viewport;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/Viewport.ts"],"names":[],"mappings":"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","file":"Viewport.js","sourceRoot":".","sourcesContent":["/**\n * @license MIT\n */\n\nimport { ITerminal } from './Interfaces';\nimport { CharMeasure } from './utils/CharMeasure';\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport {\n  private currentRowHeight: number;\n  private lastRecordedBufferLength: number;\n  private lastRecordedViewportHeight: number;\n\n  /**\n   * Creates a new Viewport.\n   * @param terminal The terminal this viewport belongs to.\n   * @param viewportElement The DOM element acting as the viewport.\n   * @param scrollArea The DOM element acting as the scroll area.\n   * @param charMeasureElement A DOM element used to measure the character size of. the terminal.\n   */\n  constructor(\n    private terminal: ITerminal,\n    private viewportElement: HTMLElement,\n    private scrollArea: HTMLElement,\n    private charMeasure: CharMeasure\n  ) {\n    this.currentRowHeight = 0;\n    this.lastRecordedBufferLength = 0;\n    this.lastRecordedViewportHeight = 0;\n\n    this.terminal.on('scroll', this.syncScrollArea.bind(this));\n    this.terminal.on('resize', this.syncScrollArea.bind(this));\n    this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\n\n    // Perform this async to ensure the CharMeasure is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   * @param charSize A character size measurement bounding rect object, if it doesn't exist it will\n   *   be created.\n   */\n  private refresh(): void {\n    if (this.charMeasure.height > 0) {\n      const rowHeightChanged = this.charMeasure.height !== this.currentRowHeight;\n      if (rowHeightChanged) {\n        this.currentRowHeight = this.charMeasure.height;\n        this.viewportElement.style.lineHeight = this.charMeasure.height + 'px';\n        this.terminal.rowContainer.style.lineHeight = this.charMeasure.height + 'px';\n      }\n      const viewportHeightChanged = this.lastRecordedViewportHeight !== this.terminal.rows;\n      if (rowHeightChanged || viewportHeightChanged) {\n        this.lastRecordedViewportHeight = this.terminal.rows;\n        this.viewportElement.style.height = this.charMeasure.height * this.terminal.rows + 'px';\n      }\n      this.scrollArea.style.height = (this.charMeasure.height * this.lastRecordedBufferLength) + 'px';\n    }\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(): void {\n    if (this.lastRecordedBufferLength !== this.terminal.lines.length) {\n      // If buffer height changed\n      this.lastRecordedBufferLength = this.terminal.lines.length;\n      this.refresh();\n    } else if (this.lastRecordedViewportHeight !== this.terminal.rows) {\n      // If viewport height changed\n      this.refresh();\n    } else {\n      // If size has changed, refresh viewport\n      if (this.charMeasure.height !== this.currentRowHeight) {\n        this.refresh();\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this.terminal.ydisp * this.currentRowHeight;\n    if (this.viewportElement.scrollTop !== scrollTop) {\n      this.viewportElement.scrollTop = scrollTop;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private onScroll(ev: Event) {\n    const newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\n    const diff = newRow - this.terminal.ydisp;\n    this.terminal.scrollDisp(diff, true);\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent) {\n    if (ev.deltaY === 0) {\n      // Do nothing if it's not a vertical scroll event\n      return;\n    }\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let multiplier = 1;\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      multiplier = this.currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      multiplier = this.currentRowHeight * this.terminal.rows;\n    }\n    this.viewportElement.scrollTop += ev.deltaY * multiplier;\n    // Prevent the page from scrolling when the terminal scrolls\n    ev.preventDefault();\n  };\n}\n"]}},"error":null,"hash":"16dc98d2ebbd2ab7b88183dac8c19a46","cacheData":{"env":{}}}