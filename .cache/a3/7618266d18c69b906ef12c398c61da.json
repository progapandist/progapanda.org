{"id":"../node_modules/xterm/lib/Renderer.js","dependencies":[{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Renderer.js.map","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/src/Renderer.ts","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/package.json","includedInParent":true,"mtime":1587223993374},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/package.json","includedInParent":true,"mtime":1586604134482},{"name":"./utils/DomElementObjectPool","loc":{"line":3,"column":37},"parent":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Renderer.js","resolved":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/utils/DomElementObjectPool.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DomElementObjectPool_1 = require(\"./utils/DomElementObjectPool\");\nvar MAX_REFRESH_FRAME_SKIP = 5;\nvar FLAGS;\n(function (FLAGS) {\n    FLAGS[FLAGS[\"BOLD\"] = 1] = \"BOLD\";\n    FLAGS[FLAGS[\"UNDERLINE\"] = 2] = \"UNDERLINE\";\n    FLAGS[FLAGS[\"BLINK\"] = 4] = \"BLINK\";\n    FLAGS[FLAGS[\"INVERSE\"] = 8] = \"INVERSE\";\n    FLAGS[FLAGS[\"INVISIBLE\"] = 16] = \"INVISIBLE\";\n})(FLAGS || (FLAGS = {}));\n;\nvar brokenBold = null;\nvar Renderer = (function () {\n    function Renderer(_terminal) {\n        this._terminal = _terminal;\n        this._refreshRowsQueue = [];\n        this._refreshFramesSkipped = 0;\n        this._refreshAnimationFrame = null;\n        this._spanElementObjectPool = new DomElementObjectPool_1.DomElementObjectPool('span');\n        if (brokenBold === null) {\n            brokenBold = checkBoldBroken(this._terminal.element);\n        }\n        this._spanElementObjectPool = new DomElementObjectPool_1.DomElementObjectPool('span');\n    }\n    Renderer.prototype.queueRefresh = function (start, end) {\n        this._refreshRowsQueue.push({ start: start, end: end });\n        if (!this._refreshAnimationFrame) {\n            this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n        }\n    };\n    Renderer.prototype._refreshLoop = function () {\n        var skipFrame = this._terminal.writeBuffer.length > 0 && this._refreshFramesSkipped++ <= MAX_REFRESH_FRAME_SKIP;\n        if (skipFrame) {\n            this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n            return;\n        }\n        this._refreshFramesSkipped = 0;\n        var start;\n        var end;\n        if (this._refreshRowsQueue.length > 4) {\n            start = 0;\n            end = this._terminal.rows - 1;\n        }\n        else {\n            start = this._refreshRowsQueue[0].start;\n            end = this._refreshRowsQueue[0].end;\n            for (var i = 1; i < this._refreshRowsQueue.length; i++) {\n                if (this._refreshRowsQueue[i].start < start) {\n                    start = this._refreshRowsQueue[i].start;\n                }\n                if (this._refreshRowsQueue[i].end > end) {\n                    end = this._refreshRowsQueue[i].end;\n                }\n            }\n        }\n        this._refreshRowsQueue = [];\n        this._refreshAnimationFrame = null;\n        this._refresh(start, end);\n    };\n    Renderer.prototype._refresh = function (start, end) {\n        var parent;\n        if (end - start >= this._terminal.rows / 2) {\n            parent = this._terminal.element.parentNode;\n            if (parent) {\n                this._terminal.element.removeChild(this._terminal.rowContainer);\n            }\n        }\n        var width = this._terminal.cols;\n        var y = start;\n        if (end >= this._terminal.rows) {\n            this._terminal.log('`end` is too large. Most likely a bad CSR.');\n            end = this._terminal.rows - 1;\n        }\n        for (; y <= end; y++) {\n            var row = y + this._terminal.ydisp;\n            var line = this._terminal.lines.get(row);\n            var x = void 0;\n            if (this._terminal.y === y - (this._terminal.ybase - this._terminal.ydisp) &&\n                this._terminal.cursorState &&\n                !this._terminal.cursorHidden) {\n                x = this._terminal.x;\n            }\n            else {\n                x = -1;\n            }\n            var attr = this._terminal.defAttr;\n            var documentFragment = document.createDocumentFragment();\n            var innerHTML = '';\n            var currentElement = void 0;\n            while (this._terminal.children[y].children.length) {\n                var child = this._terminal.children[y].children[0];\n                this._terminal.children[y].removeChild(child);\n                this._spanElementObjectPool.release(child);\n            }\n            for (var i = 0; i < width; i++) {\n                var data = line[i][0];\n                var ch = line[i][1];\n                var ch_width = line[i][2];\n                if (!ch_width) {\n                    continue;\n                }\n                if (i === x) {\n                    data = -1;\n                }\n                if (data !== attr) {\n                    if (attr !== this._terminal.defAttr) {\n                        if (innerHTML) {\n                            currentElement.innerHTML = innerHTML;\n                            innerHTML = '';\n                        }\n                        documentFragment.appendChild(currentElement);\n                        currentElement = null;\n                    }\n                    if (data !== this._terminal.defAttr) {\n                        if (innerHTML && !currentElement) {\n                            currentElement = this._spanElementObjectPool.acquire();\n                        }\n                        if (currentElement) {\n                            if (innerHTML) {\n                                currentElement.innerHTML = innerHTML;\n                                innerHTML = '';\n                            }\n                            documentFragment.appendChild(currentElement);\n                        }\n                        currentElement = this._spanElementObjectPool.acquire();\n                        if (data === -1) {\n                            currentElement.classList.add('reverse-video', 'terminal-cursor');\n                        }\n                        else {\n                            var bg = data & 0x1ff;\n                            var fg = (data >> 9) & 0x1ff;\n                            var flags = data >> 18;\n                            if (flags & FLAGS.BOLD) {\n                                if (!brokenBold) {\n                                    currentElement.classList.add('xterm-bold');\n                                }\n                                if (fg < 8) {\n                                    fg += 8;\n                                }\n                            }\n                            if (flags & FLAGS.UNDERLINE) {\n                                currentElement.classList.add('xterm-underline');\n                            }\n                            if (flags & FLAGS.BLINK) {\n                                currentElement.classList.add('xterm-blink');\n                            }\n                            if (flags & FLAGS.INVERSE) {\n                                var temp = bg;\n                                bg = fg;\n                                fg = temp;\n                                if ((flags & 1) && fg < 8) {\n                                    fg += 8;\n                                }\n                            }\n                            if (flags & FLAGS.INVISIBLE) {\n                                currentElement.classList.add('xterm-hidden');\n                            }\n                            if (flags & FLAGS.INVERSE) {\n                                if (bg === 257) {\n                                    bg = 15;\n                                }\n                                if (fg === 256) {\n                                    fg = 0;\n                                }\n                            }\n                            if (bg < 256) {\n                                currentElement.classList.add(\"xterm-bg-color-\" + bg);\n                            }\n                            if (fg < 256) {\n                                currentElement.classList.add(\"xterm-color-\" + fg);\n                            }\n                        }\n                    }\n                }\n                if (ch_width === 2) {\n                    innerHTML += \"<span class=\\\"xterm-wide-char\\\">\" + ch + \"</span>\";\n                }\n                else if (ch.charCodeAt(0) > 255) {\n                    innerHTML += \"<span class=\\\"xterm-normal-char\\\">\" + ch + \"</span>\";\n                }\n                else {\n                    switch (ch) {\n                        case '&':\n                            innerHTML += '&amp;';\n                            break;\n                        case '<':\n                            innerHTML += '&lt;';\n                            break;\n                        case '>':\n                            innerHTML += '&gt;';\n                            break;\n                        default:\n                            if (ch <= ' ') {\n                                innerHTML += '&nbsp;';\n                            }\n                            else {\n                                innerHTML += ch;\n                            }\n                            break;\n                    }\n                }\n                attr = data;\n            }\n            if (innerHTML && !currentElement) {\n                currentElement = this._spanElementObjectPool.acquire();\n            }\n            if (currentElement) {\n                if (innerHTML) {\n                    currentElement.innerHTML = innerHTML;\n                    innerHTML = '';\n                }\n                documentFragment.appendChild(currentElement);\n                currentElement = null;\n            }\n            this._terminal.children[y].appendChild(documentFragment);\n        }\n        if (parent) {\n            this._terminal.element.appendChild(this._terminal.rowContainer);\n        }\n        this._terminal.emit('refresh', { element: this._terminal.element, start: start, end: end });\n    };\n    ;\n    return Renderer;\n}());\nexports.Renderer = Renderer;\nfunction checkBoldBroken(terminal) {\n    var document = terminal.ownerDocument;\n    var el = document.createElement('span');\n    el.innerHTML = 'hello world';\n    terminal.appendChild(el);\n    var w1 = el.offsetWidth;\n    var h1 = el.offsetHeight;\n    el.style.fontWeight = 'bold';\n    var w2 = el.offsetWidth;\n    var h2 = el.offsetHeight;\n    terminal.removeChild(el);\n    return w1 !== w2 || h1 !== h2;\n}\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/Renderer.ts"],"names":[],"mappings":"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","file":"Renderer.js","sourceRoot":".","sourcesContent":["/**\n * @license MIT\n */\n\nimport { ITerminal } from './Interfaces';\nimport { DomElementObjectPool } from './utils/DomElementObjectPool';\n\n/**\n * The maximum number of refresh frames to skip when the write buffer is non-\n * empty. Note that these frames may be intermingled with frames that are\n * skipped via requestAnimationFrame's mechanism.\n */\nconst MAX_REFRESH_FRAME_SKIP = 5;\n\n/**\n * Flags used to render terminal text properly.\n */\nenum FLAGS {\n  BOLD = 1,\n  UNDERLINE = 2,\n  BLINK = 4,\n  INVERSE = 8,\n  INVISIBLE = 16\n};\n\nlet brokenBold: boolean = null;\n\nexport class Renderer {\n  /** A queue of the rows to be refreshed */\n  private _refreshRowsQueue: {start: number, end: number}[] = [];\n  private _refreshFramesSkipped = 0;\n  private _refreshAnimationFrame = null;\n\n  private _spanElementObjectPool = new DomElementObjectPool('span');\n\n  constructor(private _terminal: ITerminal) {\n    // Figure out whether boldness affects\n    // the character width of monospace fonts.\n    if (brokenBold === null) {\n      brokenBold = checkBoldBroken((<any>this._terminal).element);\n    }\n    this._spanElementObjectPool = new DomElementObjectPool('span');\n\n    // TODO: Pull more DOM interactions into Renderer.constructor, element for\n    // example should be owned by Renderer (and also exposed by Terminal due to\n    // to established public API).\n  }\n\n  /**\n   * Queues a refresh between two rows (inclusive), to be done on next animation\n   * frame.\n   * @param {number} start The start row.\n   * @param {number} end The end row.\n   */\n  public queueRefresh(start: number, end: number): void {\n    this._refreshRowsQueue.push({ start: start, end: end });\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  private _refreshLoop(): void {\n    // Skip MAX_REFRESH_FRAME_SKIP frames if the writeBuffer is non-empty as it\n    // will need to be immediately refreshed anyway. This saves a lot of\n    // rendering time as the viewport DOM does not need to be refreshed, no\n    // scroll events, no layouts, etc.\n    const skipFrame = this._terminal.writeBuffer.length > 0 && this._refreshFramesSkipped++ <= MAX_REFRESH_FRAME_SKIP;\n    if (skipFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\n      return;\n    }\n\n    this._refreshFramesSkipped = 0;\n    let start;\n    let end;\n    if (this._refreshRowsQueue.length > 4) {\n      // Just do a full refresh when 5+ refreshes are queued\n      start = 0;\n      end = this._terminal.rows - 1;\n    } else {\n      // Get start and end rows that need refreshing\n      start = this._refreshRowsQueue[0].start;\n      end = this._refreshRowsQueue[0].end;\n      for (let i = 1; i < this._refreshRowsQueue.length; i++) {\n        if (this._refreshRowsQueue[i].start < start) {\n          start = this._refreshRowsQueue[i].start;\n        }\n        if (this._refreshRowsQueue[i].end > end) {\n          end = this._refreshRowsQueue[i].end;\n        }\n      }\n    }\n    this._refreshRowsQueue = [];\n    this._refreshAnimationFrame = null;\n    this._refresh(start, end);\n  }\n\n  /**\n   * Refreshes (re-renders) terminal content within two rows (inclusive)\n   *\n   * Rendering Engine:\n   *\n   * In the screen buffer, each character is stored as a an array with a character\n   * and a 32-bit integer:\n   *   - First value: a utf-16 character.\n   *   - Second value:\n   *   - Next 9 bits: background color (0-511).\n   *   - Next 9 bits: foreground color (0-511).\n   *   - Next 14 bits: a mask for misc. flags:\n   *     - 1=bold\n   *     - 2=underline\n   *     - 4=blink\n   *     - 8=inverse\n   *     - 16=invisible\n   *\n   * @param {number} start The row to start from (between 0 and terminal's height terminal - 1)\n   * @param {number} end The row to end at (between fromRow and terminal's height terminal - 1)\n   */\n  private _refresh(start: number, end: number): void {\n    // If this is a big refresh, remove the terminal rows from the DOM for faster calculations\n    let parent;\n    if (end - start >= this._terminal.rows / 2) {\n      parent = this._terminal.element.parentNode;\n      if (parent) {\n        this._terminal.element.removeChild(this._terminal.rowContainer);\n      }\n    }\n\n    let width = this._terminal.cols;\n    let y = start;\n\n    if (end >= this._terminal.rows) {\n      this._terminal.log('`end` is too large. Most likely a bad CSR.');\n      end = this._terminal.rows - 1;\n    }\n\n    for (; y <= end; y++) {\n      let row = y + this._terminal.ydisp;\n\n      let line = this._terminal.lines.get(row);\n\n      let x;\n      if (this._terminal.y === y - (this._terminal.ybase - this._terminal.ydisp) &&\n          this._terminal.cursorState &&\n          !this._terminal.cursorHidden) {\n        x = this._terminal.x;\n      } else {\n        x = -1;\n      }\n\n      let attr = this._terminal.defAttr;\n\n      const documentFragment = document.createDocumentFragment();\n      let innerHTML = '';\n      let currentElement;\n\n      // Return the row's spans to the pool\n      while (this._terminal.children[y].children.length) {\n        const child = this._terminal.children[y].children[0];\n        this._terminal.children[y].removeChild(child);\n        this._spanElementObjectPool.release(<HTMLElement>child);\n      }\n\n      for (let i = 0; i < width; i++) {\n        // TODO: Could data be a more specific type?\n        let data: any = line[i][0];\n        const ch = line[i][1];\n        const ch_width: any = line[i][2];\n        if (!ch_width) {\n          continue;\n        }\n\n        if (i === x) {\n          data = -1;\n        }\n\n        if (data !== attr) {\n          if (attr !== this._terminal.defAttr) {\n            if (innerHTML) {\n              currentElement.innerHTML = innerHTML;\n              innerHTML = '';\n            }\n            documentFragment.appendChild(currentElement);\n            currentElement = null;\n          }\n          if (data !== this._terminal.defAttr) {\n            if (innerHTML && !currentElement) {\n              currentElement = this._spanElementObjectPool.acquire();\n            }\n            if (currentElement) {\n              if (innerHTML) {\n                currentElement.innerHTML = innerHTML;\n                innerHTML = '';\n              }\n              documentFragment.appendChild(currentElement);\n            }\n            currentElement = this._spanElementObjectPool.acquire();\n            if (data === -1) {\n              currentElement.classList.add('reverse-video', 'terminal-cursor');\n            } else {\n              let bg = data & 0x1ff;\n              let fg = (data >> 9) & 0x1ff;\n              let flags = data >> 18;\n\n              if (flags & FLAGS.BOLD) {\n                if (!brokenBold) {\n                  currentElement.classList.add('xterm-bold');\n                }\n                // See: XTerm*boldColors\n                if (fg < 8) {\n                  fg += 8;\n                }\n              }\n\n              if (flags & FLAGS.UNDERLINE) {\n                currentElement.classList.add('xterm-underline');\n              }\n\n              if (flags & FLAGS.BLINK) {\n                currentElement.classList.add('xterm-blink');\n              }\n\n              // If inverse flag is on, then swap the foreground and background variables.\n              if (flags & FLAGS.INVERSE) {\n                let temp = bg;\n                bg = fg;\n                fg = temp;\n                // Should inverse just be before the above boldColors effect instead?\n                if ((flags & 1) && fg < 8) {\n                  fg += 8;\n                }\n              }\n\n              if (flags & FLAGS.INVISIBLE) {\n                currentElement.classList.add('xterm-hidden');\n              }\n\n              /**\n               * Weird situation: Invert flag used black foreground and white background results\n               * in invalid background color, positioned at the 256 index of the 256 terminal\n               * color map. Pin the colors manually in such a case.\n               *\n               * Source: https://github.com/sourcelair/xterm.js/issues/57\n               */\n              if (flags & FLAGS.INVERSE) {\n                if (bg === 257) {\n                  bg = 15;\n                }\n                if (fg === 256) {\n                  fg = 0;\n                }\n              }\n\n              if (bg < 256) {\n                currentElement.classList.add(`xterm-bg-color-${bg}`);\n              }\n\n              if (fg < 256) {\n                currentElement.classList.add(`xterm-color-${fg}`);\n              }\n            }\n          }\n        }\n\n        if (ch_width === 2) {\n          // Wrap wide characters so they're sized correctly. It's more difficult to release these\n          // from the object pool so just create new ones via innerHTML.\n          innerHTML += `<span class=\"xterm-wide-char\">${ch}</span>`;\n        } else if (ch.charCodeAt(0) > 255) {\n          // Wrap any non-wide unicode character as some fonts size them badly\n          innerHTML += `<span class=\"xterm-normal-char\">${ch}</span>`;\n        } else {\n          switch (ch) {\n            case '&':\n              innerHTML += '&amp;';\n              break;\n            case '<':\n              innerHTML += '&lt;';\n              break;\n            case '>':\n              innerHTML += '&gt;';\n              break;\n            default:\n              if (ch <= ' ') {\n                innerHTML += '&nbsp;';\n              } else {\n                innerHTML += ch;\n              }\n              break;\n          }\n        }\n\n        attr = data;\n      }\n\n      if (innerHTML && !currentElement) {\n        currentElement = this._spanElementObjectPool.acquire();\n      }\n      if (currentElement) {\n        if (innerHTML) {\n          currentElement.innerHTML = innerHTML;\n          innerHTML = '';\n        }\n        documentFragment.appendChild(currentElement);\n        currentElement = null;\n      }\n\n      this._terminal.children[y].appendChild(documentFragment);\n    }\n\n    if (parent) {\n      this._terminal.element.appendChild(this._terminal.rowContainer);\n    }\n\n    this._terminal.emit('refresh', {element: this._terminal.element, start: start, end: end});\n  };\n}\n\n\n// If bold is broken, we can't use it in the terminal.\nfunction checkBoldBroken(terminal) {\n  const document = terminal.ownerDocument;\n  const el = document.createElement('span');\n  el.innerHTML = 'hello world';\n  terminal.appendChild(el);\n  const w1 = el.offsetWidth;\n  const h1 = el.offsetHeight;\n  el.style.fontWeight = 'bold';\n  const w2 = el.offsetWidth;\n  const h2 = el.offsetHeight;\n  terminal.removeChild(el);\n  return w1 !== w2 || h1 !== h2;\n}\n"]}},"error":null,"hash":"1d612e3a4f538e337bc3cdaaa85a7746","cacheData":{"env":{}}}