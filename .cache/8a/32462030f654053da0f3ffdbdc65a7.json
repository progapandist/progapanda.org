{"id":"../node_modules/xterm/lib/utils/Mouse.js","dependencies":[{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/utils/Mouse.js.map","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/src/utils/Mouse.ts","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/package.json","includedInParent":true,"mtime":1587223993374},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/package.json","includedInParent":true,"mtime":1587222920480}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getCoords(event, rowContainer, charMeasure) {\n    if (event.pageX == null) {\n        return null;\n    }\n    var x = event.pageX;\n    var y = event.pageY;\n    var el = rowContainer;\n    while (el && el !== self.document.documentElement) {\n        x -= el.offsetLeft;\n        y -= el.offsetTop;\n        el = 'offsetParent' in el ? el.offsetParent : el.parentElement;\n    }\n    x = Math.ceil(x / charMeasure.width);\n    y = Math.ceil(y / charMeasure.height);\n    return [x, y];\n}\nexports.getCoords = getCoords;\nfunction getRawByteCoords(event, rowContainer, charMeasure, colCount, rowCount) {\n    var coords = getCoords(event, rowContainer, charMeasure);\n    var x = coords[0];\n    var y = coords[1];\n    x = Math.min(Math.max(x, 0), colCount);\n    y = Math.min(Math.max(y, 0), rowCount);\n    x += 32;\n    y += 32;\n    return { x: x, y: y };\n}\nexports.getRawByteCoords = getRawByteCoords;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/utils/Mouse.ts"],"names":[],"mappings":";;AAcA,mBAA0B,KAAiB,EAAE,YAAyB,EAAE,WAAwB;IAE9F,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;IACpB,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;IACpB,IAAI,EAAE,GAAG,YAAY,CAAC;IAItB,OAAO,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;QAClD,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC;QACnB,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC;QAClB,EAAE,GAAG,cAAc,IAAI,EAAE,GAAgB,EAAE,CAAC,YAAY,GAAgB,EAAE,CAAC,aAAa,CAAC;IAC3F,CAAC;IAGD,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAEtC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChB,CAAC;AAvBD,8BAuBC;AAYD,0BAAiC,KAAiB,EAAE,YAAyB,EAAE,WAAwB,EAAE,QAAgB,EAAE,QAAgB;IACzI,IAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;IAC3D,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAClB,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAGlB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAGvC,CAAC,IAAI,EAAE,CAAC;IACR,CAAC,IAAI,EAAE,CAAC;IAER,MAAM,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC;AAClB,CAAC;AAdD,4CAcC","file":"Mouse.js","sourceRoot":"..","sourcesContent":["/**\n * @license MIT\n */\n\nimport { CharMeasure } from './CharMeasure';\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param event The mouse event.\n * @param rowContainer The terminal's row container.\n * @param charMeasure The char measure object used to determine character sizes.\n */\nexport function getCoords(event: MouseEvent, rowContainer: HTMLElement, charMeasure: CharMeasure): [number, number] {\n  // Ignore browsers that don't support MouseEvent.pageX\n  if (event.pageX == null) {\n    return null;\n  }\n\n  let x = event.pageX;\n  let y = event.pageY;\n  let el = rowContainer;\n\n  // Converts the coordinates from being relative to the document to being\n  // relative to the terminal.\n  while (el && el !== self.document.documentElement) {\n    x -= el.offsetLeft;\n    y -= el.offsetTop;\n    el = 'offsetParent' in el ? <HTMLElement>el.offsetParent : <HTMLElement>el.parentElement;\n  }\n\n  // Convert to cols/rows\n  x = Math.ceil(x / charMeasure.width);\n  y = Math.ceil(y / charMeasure.height);\n\n  return [x, y];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event, wrapping\n * them to the bounds of the terminal and adding 32 to both the x and y values\n * as expected by xterm.\n * @param event The mouse event.\n * @param rowContainer The terminal's row container.\n * @param charMeasure The char measure object used to determine character sizes.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows in the terminal.\n */\nexport function getRawByteCoords(event: MouseEvent, rowContainer: HTMLElement, charMeasure: CharMeasure, colCount: number, rowCount: number): { x: number, y: number } {\n  const coords = getCoords(event, rowContainer, charMeasure);\n  let x = coords[0];\n  let y = coords[1];\n\n  // Ensure coordinates are within the terminal viewport.\n  x = Math.min(Math.max(x, 0), colCount);\n  y = Math.min(Math.max(y, 0), rowCount);\n\n  // xterm sends raw bytes and starts at 32 (SP) for each.\n  x += 32;\n  y += 32;\n\n  return { x, y };\n}\n"]}},"error":null,"hash":"d1dab9b2809230606d5cfc8eddc60032","cacheData":{"env":{}}}