{"id":"../node_modules/xterm/lib/CompositionHelper.js","dependencies":[{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/CompositionHelper.js.map","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/src/CompositionHelper.ts","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/package.json","includedInParent":true,"mtime":1587223993374},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/package.json","includedInParent":true,"mtime":1586604134482}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CompositionHelper = (function () {\n    function CompositionHelper(textarea, compositionView, terminal) {\n        this.textarea = textarea;\n        this.compositionView = compositionView;\n        this.terminal = terminal;\n        this.isComposing = false;\n        this.isSendingComposition = false;\n        this.compositionPosition = { start: null, end: null };\n    }\n    CompositionHelper.prototype.compositionstart = function () {\n        this.isComposing = true;\n        this.compositionPosition.start = this.textarea.value.length;\n        this.compositionView.textContent = '';\n        this.compositionView.classList.add('active');\n    };\n    CompositionHelper.prototype.compositionupdate = function (ev) {\n        var _this = this;\n        this.compositionView.textContent = ev.data;\n        this.updateCompositionElements();\n        setTimeout(function () {\n            _this.compositionPosition.end = _this.textarea.value.length;\n        }, 0);\n    };\n    CompositionHelper.prototype.compositionend = function () {\n        this.finalizeComposition(true);\n    };\n    CompositionHelper.prototype.keydown = function (ev) {\n        if (this.isComposing || this.isSendingComposition) {\n            if (ev.keyCode === 229) {\n                return false;\n            }\n            else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n                return false;\n            }\n            else {\n                this.finalizeComposition(false);\n            }\n        }\n        if (ev.keyCode === 229) {\n            this.handleAnyTextareaChanges();\n            return false;\n        }\n        return true;\n    };\n    CompositionHelper.prototype.finalizeComposition = function (waitForPropogation) {\n        var _this = this;\n        this.compositionView.classList.remove('active');\n        this.isComposing = false;\n        this.clearTextareaPosition();\n        if (!waitForPropogation) {\n            this.isSendingComposition = false;\n            var input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\n            this.terminal.handler(input);\n        }\n        else {\n            var currentCompositionPosition_1 = {\n                start: this.compositionPosition.start,\n                end: this.compositionPosition.end,\n            };\n            this.isSendingComposition = true;\n            setTimeout(function () {\n                if (_this.isSendingComposition) {\n                    _this.isSendingComposition = false;\n                    var input = void 0;\n                    if (_this.isComposing) {\n                        input = _this.textarea.value.substring(currentCompositionPosition_1.start, currentCompositionPosition_1.end);\n                    }\n                    else {\n                        input = _this.textarea.value.substring(currentCompositionPosition_1.start);\n                    }\n                    _this.terminal.handler(input);\n                }\n            }, 0);\n        }\n    };\n    CompositionHelper.prototype.handleAnyTextareaChanges = function () {\n        var _this = this;\n        var oldValue = this.textarea.value;\n        setTimeout(function () {\n            if (!_this.isComposing) {\n                var newValue = _this.textarea.value;\n                var diff = newValue.replace(oldValue, '');\n                if (diff.length > 0) {\n                    _this.terminal.handler(diff);\n                }\n            }\n        }, 0);\n    };\n    CompositionHelper.prototype.updateCompositionElements = function (dontRecurse) {\n        var _this = this;\n        if (!this.isComposing) {\n            return;\n        }\n        var cursor = this.terminal.element.querySelector('.terminal-cursor');\n        if (cursor) {\n            var xtermRows = this.terminal.element.querySelector('.xterm-rows');\n            var cursorTop = xtermRows.offsetTop + cursor.offsetTop;\n            this.compositionView.style.left = cursor.offsetLeft + 'px';\n            this.compositionView.style.top = cursorTop + 'px';\n            this.compositionView.style.height = cursor.offsetHeight + 'px';\n            this.compositionView.style.lineHeight = cursor.offsetHeight + 'px';\n            var compositionViewBounds = this.compositionView.getBoundingClientRect();\n            this.textarea.style.left = cursor.offsetLeft + 'px';\n            this.textarea.style.top = cursorTop + 'px';\n            this.textarea.style.width = compositionViewBounds.width + 'px';\n            this.textarea.style.height = compositionViewBounds.height + 'px';\n            this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\n        }\n        if (!dontRecurse) {\n            setTimeout(function () { return _this.updateCompositionElements(true); }, 0);\n        }\n    };\n    ;\n    CompositionHelper.prototype.clearTextareaPosition = function () {\n        this.textarea.style.left = '';\n        this.textarea.style.top = '';\n    };\n    ;\n    return CompositionHelper;\n}());\nexports.CompositionHelper = CompositionHelper;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/CompositionHelper.ts"],"names":[],"mappings":"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","file":"CompositionHelper.js","sourceRoot":".","sourcesContent":["/**\n * @license MIT\n */\n\nimport { ITerminal } from './Interfaces';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private isComposing: boolean;\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private isSendingComposition: boolean;\n\n  /**\n   * Creates a new CompositionHelper.\n   * @param textarea The textarea that xterm uses for input.\n   * @param compositionView The element to display the in-progress composition in.\n   * @param terminal The Terminal to forward the finished composition to.\n   */\n  constructor(\n    private textarea: HTMLTextAreaElement,\n    private compositionView: HTMLElement,\n    private terminal: ITerminal\n  ) {\n    this.isComposing = false;\n    this.isSendingComposition = false;\n    this.compositionPosition = { start: null, end: null };\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart() {\n    this.isComposing = true;\n    this.compositionPosition.start = this.textarea.value.length;\n    this.compositionView.textContent = '';\n    this.compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param {CompositionEvent} ev The event.\n   */\n  public compositionupdate(ev: CompositionEvent) {\n    this.compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this.compositionPosition.end = this.textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend() {\n    this.finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent) {\n    if (this.isComposing || this.isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      } else {\n        // Finish composition immediately. This is mainly here for the case where enter is\n        // pressed and the handler needs to be triggered before the command is executed.\n        this.finalizeComposition(false);\n      }\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this.handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropogation Whether to wait for events to propogate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is send before\n   *   the command is executed.\n   */\n  private finalizeComposition(waitForPropogation: boolean) {\n    this.compositionView.classList.remove('active');\n    this.isComposing = false;\n    this.clearTextareaPosition();\n\n    if (!waitForPropogation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this.isSendingComposition = false;\n      const input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\n      this.terminal.handler(input);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this.compositionPosition.start,\n        end: this.compositionPosition.end,\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved, this solution was used\n      // because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this.isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this.isSendingComposition) {\n          this.isSendingComposition = false;\n          let input;\n          if (this.isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this.textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this.textarea.value.substring(currentCompositionPosition.start);\n          }\n          this.terminal.handler(input);\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private handleAnyTextareaChanges() {\n    const oldValue = this.textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this.isComposing) {\n        const newValue = this.textarea.value;\n        const diff = newValue.replace(oldValue, '');\n        if (diff.length > 0) {\n          this.terminal.handler(diff);\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean) {\n    if (!this.isComposing) {\n      return;\n    }\n    const cursor = <HTMLElement>this.terminal.element.querySelector('.terminal-cursor');\n    if (cursor) {\n      // Take .xterm-rows offsetTop into account as well in case it's positioned absolutely within\n      // the .xterm element.\n      const xtermRows = <HTMLElement>this.terminal.element.querySelector('.xterm-rows');\n      const cursorTop = xtermRows.offsetTop + cursor.offsetTop;\n\n      this.compositionView.style.left = cursor.offsetLeft + 'px';\n      this.compositionView.style.top = cursorTop + 'px';\n      this.compositionView.style.height = cursor.offsetHeight + 'px';\n      this.compositionView.style.lineHeight = cursor.offsetHeight + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this.compositionView.getBoundingClientRect();\n      this.textarea.style.left = cursor.offsetLeft + 'px';\n      this.textarea.style.top = cursorTop + 'px';\n      this.textarea.style.width = compositionViewBounds.width + 'px';\n      this.textarea.style.height = compositionViewBounds.height + 'px';\n      this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  };\n\n  /**\n   * Clears the textarea's position so that the cursor does not blink on IE.\n   * @private\n   */\n  private clearTextareaPosition() {\n    this.textarea.style.left = '';\n    this.textarea.style.top = '';\n  };\n}\n"]}},"error":null,"hash":"58b59e54e0b0fed433e744d23a8d6dfc","cacheData":{"env":{}}}