{"id":"../node_modules/xterm/lib/Parser.js","dependencies":[{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Parser.js.map","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/src/Parser.ts","includedInParent":true,"mtime":1587222920480},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/package.json","includedInParent":true,"mtime":1587223993374},{"name":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/package.json","includedInParent":true,"mtime":1586604134482},{"name":"./EscapeSequences","loc":{"line":3,"column":32},"parent":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Parser.js","resolved":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/EscapeSequences.js"},{"name":"./Charsets","loc":{"line":4,"column":25},"parent":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Parser.js","resolved":"/Users/andybarnov/code/progapandist/rnd/webterm/node_modules/xterm/lib/Charsets.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\nvar Charsets_1 = require(\"./Charsets\");\nvar normalStateHandler = {};\nnormalStateHandler[EscapeSequences_1.C0.BEL] = function (parser, handler) { return handler.bell(); };\nnormalStateHandler[EscapeSequences_1.C0.LF] = function (parser, handler) { return handler.lineFeed(); };\nnormalStateHandler[EscapeSequences_1.C0.VT] = normalStateHandler[EscapeSequences_1.C0.LF];\nnormalStateHandler[EscapeSequences_1.C0.FF] = normalStateHandler[EscapeSequences_1.C0.LF];\nnormalStateHandler[EscapeSequences_1.C0.CR] = function (parser, handler) { return handler.carriageReturn(); };\nnormalStateHandler[EscapeSequences_1.C0.BS] = function (parser, handler) { return handler.backspace(); };\nnormalStateHandler[EscapeSequences_1.C0.HT] = function (parser, handler) { return handler.tab(); };\nnormalStateHandler[EscapeSequences_1.C0.SO] = function (parser, handler) { return handler.shiftOut(); };\nnormalStateHandler[EscapeSequences_1.C0.SI] = function (parser, handler) { return handler.shiftIn(); };\nnormalStateHandler[EscapeSequences_1.C0.ESC] = function (parser, handler) { return parser.setState(ParserState.ESCAPED); };\nvar escapedStateHandler = {};\nescapedStateHandler['['] = function (parser, terminal) {\n    terminal.params = [];\n    terminal.currentParam = 0;\n    parser.setState(ParserState.CSI_PARAM);\n};\nescapedStateHandler[']'] = function (parser, terminal) {\n    terminal.params = [];\n    terminal.currentParam = 0;\n    parser.setState(ParserState.OSC);\n};\nescapedStateHandler['P'] = function (parser, terminal) {\n    terminal.params = [];\n    terminal.currentParam = 0;\n    parser.setState(ParserState.DCS);\n};\nescapedStateHandler['_'] = function (parser, terminal) {\n    parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['^'] = function (parser, terminal) {\n    parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['c'] = function (parser, terminal) {\n    terminal.reset();\n};\nescapedStateHandler['E'] = function (parser, terminal) {\n    terminal.x = 0;\n    terminal.index();\n    parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['D'] = function (parser, terminal) {\n    terminal.index();\n    parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['M'] = function (parser, terminal) {\n    terminal.reverseIndex();\n    parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['%'] = function (parser, terminal) {\n    terminal.setgLevel(0);\n    terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n    parser.setState(ParserState.NORMAL);\n    parser.skipNextChar();\n};\nescapedStateHandler[EscapeSequences_1.C0.CAN] = function (parser) { return parser.setState(ParserState.NORMAL); };\nvar csiParamStateHandler = {};\ncsiParamStateHandler['?'] = function (parser) { return parser.setPrefix('?'); };\ncsiParamStateHandler['>'] = function (parser) { return parser.setPrefix('>'); };\ncsiParamStateHandler['!'] = function (parser) { return parser.setPrefix('!'); };\ncsiParamStateHandler['0'] = function (parser) { return parser.setParam(parser.getParam() * 10); };\ncsiParamStateHandler['1'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 1); };\ncsiParamStateHandler['2'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 2); };\ncsiParamStateHandler['3'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 3); };\ncsiParamStateHandler['4'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 4); };\ncsiParamStateHandler['5'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 5); };\ncsiParamStateHandler['6'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 6); };\ncsiParamStateHandler['7'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 7); };\ncsiParamStateHandler['8'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 8); };\ncsiParamStateHandler['9'] = function (parser) { return parser.setParam(parser.getParam() * 10 + 9); };\ncsiParamStateHandler['$'] = function (parser) { return parser.setPostfix('$'); };\ncsiParamStateHandler['\"'] = function (parser) { return parser.setPostfix('\"'); };\ncsiParamStateHandler[' '] = function (parser) { return parser.setPostfix(' '); };\ncsiParamStateHandler['\\''] = function (parser) { return parser.setPostfix('\\''); };\ncsiParamStateHandler[';'] = function (parser) { return parser.finalizeParam(); };\ncsiParamStateHandler[EscapeSequences_1.C0.CAN] = function (parser) { return parser.setState(ParserState.NORMAL); };\nvar csiStateHandler = {};\ncsiStateHandler['@'] = function (handler, params, prefix) { return handler.insertChars(params); };\ncsiStateHandler['A'] = function (handler, params, prefix) { return handler.cursorUp(params); };\ncsiStateHandler['B'] = function (handler, params, prefix) { return handler.cursorDown(params); };\ncsiStateHandler['C'] = function (handler, params, prefix) { return handler.cursorForward(params); };\ncsiStateHandler['D'] = function (handler, params, prefix) { return handler.cursorBackward(params); };\ncsiStateHandler['E'] = function (handler, params, prefix) { return handler.cursorNextLine(params); };\ncsiStateHandler['F'] = function (handler, params, prefix) { return handler.cursorPrecedingLine(params); };\ncsiStateHandler['G'] = function (handler, params, prefix) { return handler.cursorCharAbsolute(params); };\ncsiStateHandler['H'] = function (handler, params, prefix) { return handler.cursorPosition(params); };\ncsiStateHandler['I'] = function (handler, params, prefix) { return handler.cursorForwardTab(params); };\ncsiStateHandler['J'] = function (handler, params, prefix) { return handler.eraseInDisplay(params); };\ncsiStateHandler['K'] = function (handler, params, prefix) { return handler.eraseInLine(params); };\ncsiStateHandler['L'] = function (handler, params, prefix) { return handler.insertLines(params); };\ncsiStateHandler['M'] = function (handler, params, prefix) { return handler.deleteLines(params); };\ncsiStateHandler['P'] = function (handler, params, prefix) { return handler.deleteChars(params); };\ncsiStateHandler['S'] = function (handler, params, prefix) { return handler.scrollUp(params); };\ncsiStateHandler['T'] = function (handler, params, prefix) {\n    if (params.length < 2 && !prefix) {\n        handler.scrollDown(params);\n    }\n};\ncsiStateHandler['X'] = function (handler, params, prefix) { return handler.eraseChars(params); };\ncsiStateHandler['Z'] = function (handler, params, prefix) { return handler.cursorBackwardTab(params); };\ncsiStateHandler['`'] = function (handler, params, prefix) { return handler.charPosAbsolute(params); };\ncsiStateHandler['a'] = function (handler, params, prefix) { return handler.HPositionRelative(params); };\ncsiStateHandler['b'] = function (handler, params, prefix) { return handler.repeatPrecedingCharacter(params); };\ncsiStateHandler['c'] = function (handler, params, prefix) { return handler.sendDeviceAttributes(params); };\ncsiStateHandler['d'] = function (handler, params, prefix) { return handler.linePosAbsolute(params); };\ncsiStateHandler['e'] = function (handler, params, prefix) { return handler.VPositionRelative(params); };\ncsiStateHandler['f'] = function (handler, params, prefix) { return handler.HVPosition(params); };\ncsiStateHandler['g'] = function (handler, params, prefix) { return handler.tabClear(params); };\ncsiStateHandler['h'] = function (handler, params, prefix) { return handler.setMode(params); };\ncsiStateHandler['l'] = function (handler, params, prefix) { return handler.resetMode(params); };\ncsiStateHandler['m'] = function (handler, params, prefix) { return handler.charAttributes(params); };\ncsiStateHandler['n'] = function (handler, params, prefix) { return handler.deviceStatus(params); };\ncsiStateHandler['p'] = function (handler, params, prefix) {\n    switch (prefix) {\n        case '!':\n            handler.softReset(params);\n            break;\n    }\n};\ncsiStateHandler['q'] = function (handler, params, prefix, postfix) {\n    if (postfix === ' ') {\n        handler.setCursorStyle(params);\n    }\n};\ncsiStateHandler['r'] = function (handler, params) { return handler.setScrollRegion(params); };\ncsiStateHandler['s'] = function (handler, params) { return handler.saveCursor(params); };\ncsiStateHandler['u'] = function (handler, params) { return handler.restoreCursor(params); };\ncsiStateHandler[EscapeSequences_1.C0.CAN] = function (handler, params, prefix, postfix, parser) { return parser.setState(ParserState.NORMAL); };\nvar ParserState;\n(function (ParserState) {\n    ParserState[ParserState[\"NORMAL\"] = 0] = \"NORMAL\";\n    ParserState[ParserState[\"ESCAPED\"] = 1] = \"ESCAPED\";\n    ParserState[ParserState[\"CSI_PARAM\"] = 2] = \"CSI_PARAM\";\n    ParserState[ParserState[\"CSI\"] = 3] = \"CSI\";\n    ParserState[ParserState[\"OSC\"] = 4] = \"OSC\";\n    ParserState[ParserState[\"CHARSET\"] = 5] = \"CHARSET\";\n    ParserState[ParserState[\"DCS\"] = 6] = \"DCS\";\n    ParserState[ParserState[\"IGNORE\"] = 7] = \"IGNORE\";\n})(ParserState || (ParserState = {}));\nvar Parser = (function () {\n    function Parser(_inputHandler, _terminal) {\n        this._inputHandler = _inputHandler;\n        this._terminal = _terminal;\n        this._state = ParserState.NORMAL;\n    }\n    Parser.prototype.parse = function (data) {\n        var l = data.length, j, cs, ch, code, low;\n        this._position = 0;\n        if (this._terminal.surrogate_high) {\n            data = this._terminal.surrogate_high + data;\n            this._terminal.surrogate_high = '';\n        }\n        for (; this._position < l; this._position++) {\n            ch = data[this._position];\n            code = data.charCodeAt(this._position);\n            if (0xD800 <= code && code <= 0xDBFF) {\n                low = data.charCodeAt(this._position + 1);\n                if (isNaN(low)) {\n                    this._terminal.surrogate_high = ch;\n                    continue;\n                }\n                code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n                ch += data.charAt(this._position + 1);\n            }\n            if (0xDC00 <= code && code <= 0xDFFF)\n                continue;\n            switch (this._state) {\n                case ParserState.NORMAL:\n                    if (ch in normalStateHandler) {\n                        normalStateHandler[ch](this, this._inputHandler);\n                    }\n                    else {\n                        this._inputHandler.addChar(ch, code);\n                    }\n                    break;\n                case ParserState.ESCAPED:\n                    if (ch in escapedStateHandler) {\n                        escapedStateHandler[ch](this, this._terminal);\n                        break;\n                    }\n                    switch (ch) {\n                        case '(':\n                        case ')':\n                        case '*':\n                        case '+':\n                        case '-':\n                        case '.':\n                            switch (ch) {\n                                case '(':\n                                    this._terminal.gcharset = 0;\n                                    break;\n                                case ')':\n                                    this._terminal.gcharset = 1;\n                                    break;\n                                case '*':\n                                    this._terminal.gcharset = 2;\n                                    break;\n                                case '+':\n                                    this._terminal.gcharset = 3;\n                                    break;\n                                case '-':\n                                    this._terminal.gcharset = 1;\n                                    break;\n                                case '.':\n                                    this._terminal.gcharset = 2;\n                                    break;\n                            }\n                            this._state = ParserState.CHARSET;\n                            break;\n                        case '/':\n                            this._terminal.gcharset = 3;\n                            this._state = ParserState.CHARSET;\n                            this._position--;\n                            break;\n                        case 'N':\n                            break;\n                        case 'O':\n                            break;\n                        case 'n':\n                            this._terminal.setgLevel(2);\n                            break;\n                        case 'o':\n                            this._terminal.setgLevel(3);\n                            break;\n                        case '|':\n                            this._terminal.setgLevel(3);\n                            break;\n                        case '}':\n                            this._terminal.setgLevel(2);\n                            break;\n                        case '~':\n                            this._terminal.setgLevel(1);\n                            break;\n                        case '7':\n                            this._inputHandler.saveCursor();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '8':\n                            this._inputHandler.restoreCursor();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '#':\n                            this._state = ParserState.NORMAL;\n                            this._position++;\n                            break;\n                        case 'H':\n                            this._terminal.tabSet();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '=':\n                            this._terminal.log('Serial port requested application keypad.');\n                            this._terminal.applicationKeypad = true;\n                            this._terminal.viewport.syncScrollArea();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        case '>':\n                            this._terminal.log('Switching back to normal keypad.');\n                            this._terminal.applicationKeypad = false;\n                            this._terminal.viewport.syncScrollArea();\n                            this._state = ParserState.NORMAL;\n                            break;\n                        default:\n                            this._state = ParserState.NORMAL;\n                            this._terminal.error('Unknown ESC control: %s.', ch);\n                            break;\n                    }\n                    break;\n                case ParserState.CHARSET:\n                    if (ch in Charsets_1.CHARSETS) {\n                        cs = Charsets_1.CHARSETS[ch];\n                        if (ch === '/') {\n                            this.skipNextChar();\n                        }\n                    }\n                    else {\n                        cs = Charsets_1.DEFAULT_CHARSET;\n                    }\n                    this._terminal.setgCharset(this._terminal.gcharset, cs);\n                    this._terminal.gcharset = null;\n                    this._state = ParserState.NORMAL;\n                    break;\n                case ParserState.OSC:\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n                        if (ch === EscapeSequences_1.C0.ESC)\n                            this._position++;\n                        this._terminal.params.push(this._terminal.currentParam);\n                        switch (this._terminal.params[0]) {\n                            case 0:\n                            case 1:\n                            case 2:\n                                if (this._terminal.params[1]) {\n                                    this._terminal.title = this._terminal.params[1];\n                                    this._terminal.handleTitle(this._terminal.title);\n                                }\n                                break;\n                            case 3:\n                                break;\n                            case 4:\n                            case 5:\n                                break;\n                            case 10:\n                            case 11:\n                            case 12:\n                            case 13:\n                            case 14:\n                            case 15:\n                            case 16:\n                            case 17:\n                            case 18:\n                            case 19:\n                                break;\n                            case 46:\n                                break;\n                            case 50:\n                                break;\n                            case 51:\n                                break;\n                            case 52:\n                                break;\n                            case 104:\n                            case 105:\n                            case 110:\n                            case 111:\n                            case 112:\n                            case 113:\n                            case 114:\n                            case 115:\n                            case 116:\n                            case 117:\n                            case 118:\n                                break;\n                        }\n                        this._terminal.params = [];\n                        this._terminal.currentParam = 0;\n                        this._state = ParserState.NORMAL;\n                    }\n                    else {\n                        if (!this._terminal.params.length) {\n                            if (ch >= '0' && ch <= '9') {\n                                this._terminal.currentParam =\n                                    this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\n                            }\n                            else if (ch === ';') {\n                                this._terminal.params.push(this._terminal.currentParam);\n                                this._terminal.currentParam = '';\n                            }\n                        }\n                        else {\n                            this._terminal.currentParam += ch;\n                        }\n                    }\n                    break;\n                case ParserState.CSI_PARAM:\n                    if (ch in csiParamStateHandler) {\n                        csiParamStateHandler[ch](this);\n                        break;\n                    }\n                    this.finalizeParam();\n                    this._state = ParserState.CSI;\n                case ParserState.CSI:\n                    if (ch in csiStateHandler) {\n                        csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\n                    }\n                    else {\n                        this._terminal.error('Unknown CSI code: %s.', ch);\n                    }\n                    this._state = ParserState.NORMAL;\n                    this._terminal.prefix = '';\n                    this._terminal.postfix = '';\n                    break;\n                case ParserState.DCS:\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n                        if (ch === EscapeSequences_1.C0.ESC)\n                            this._position++;\n                        var pt = void 0;\n                        var valid = void 0;\n                        switch (this._terminal.prefix) {\n                            case '':\n                                break;\n                            case '$q':\n                                pt = this._terminal.currentParam;\n                                valid = false;\n                                switch (pt) {\n                                    case '\"q':\n                                        pt = '0\"q';\n                                        break;\n                                    case '\"p':\n                                        pt = '61\"p';\n                                        break;\n                                    case 'r':\n                                        pt = ''\n                                            + (this._terminal.scrollTop + 1)\n                                            + ';'\n                                            + (this._terminal.scrollBottom + 1)\n                                            + 'r';\n                                        break;\n                                    case 'm':\n                                        pt = '0m';\n                                        break;\n                                    default:\n                                        this._terminal.error('Unknown DCS Pt: %s.', pt);\n                                        pt = '';\n                                        break;\n                                }\n                                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '$r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\n                                break;\n                            case '+p':\n                                break;\n                            case '+q':\n                                pt = this._terminal.currentParam;\n                                valid = false;\n                                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '+r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\n                                break;\n                            default:\n                                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\n                                break;\n                        }\n                        this._terminal.currentParam = 0;\n                        this._terminal.prefix = '';\n                        this._state = ParserState.NORMAL;\n                    }\n                    else if (!this._terminal.currentParam) {\n                        if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\n                            this._terminal.currentParam = ch;\n                        }\n                        else if (this._terminal.prefix.length === 2) {\n                            this._terminal.currentParam = ch;\n                        }\n                        else {\n                            this._terminal.prefix += ch;\n                        }\n                    }\n                    else {\n                        this._terminal.currentParam += ch;\n                    }\n                    break;\n                case ParserState.IGNORE:\n                    if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n                        if (ch === EscapeSequences_1.C0.ESC)\n                            this._position++;\n                        this._state = ParserState.NORMAL;\n                    }\n                    break;\n            }\n        }\n        return this._state;\n    };\n    Parser.prototype.setState = function (state) {\n        this._state = state;\n    };\n    Parser.prototype.setPrefix = function (prefix) {\n        this._terminal.prefix = prefix;\n    };\n    Parser.prototype.setPostfix = function (postfix) {\n        this._terminal.postfix = postfix;\n    };\n    Parser.prototype.setParam = function (param) {\n        this._terminal.currentParam = param;\n    };\n    Parser.prototype.getParam = function () {\n        return this._terminal.currentParam;\n    };\n    Parser.prototype.finalizeParam = function () {\n        this._terminal.params.push(this._terminal.currentParam);\n        this._terminal.currentParam = 0;\n    };\n    Parser.prototype.skipNextChar = function () {\n        this._position++;\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/Parser.ts"],"names":[],"mappings":"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","file":"Parser.js","sourceRoot":".","sourcesContent":["/**\n * @license MIT\n */\n\nimport { C0 } from './EscapeSequences';\nimport { IInputHandler } from './Interfaces';\nimport { CHARSETS, DEFAULT_CHARSET } from './Charsets';\n\nconst normalStateHandler: {[key: string]: (parser: Parser, handler: IInputHandler) => void} = {};\nnormalStateHandler[C0.BEL] = (parser, handler) => handler.bell();\nnormalStateHandler[C0.LF] = (parser, handler) => handler.lineFeed();\nnormalStateHandler[C0.VT] = normalStateHandler[C0.LF];\nnormalStateHandler[C0.FF] = normalStateHandler[C0.LF];\nnormalStateHandler[C0.CR] = (parser, handler) => handler.carriageReturn();\nnormalStateHandler[C0.BS] = (parser, handler) => handler.backspace();\nnormalStateHandler[C0.HT] = (parser, handler) => handler.tab();\nnormalStateHandler[C0.SO] = (parser, handler) => handler.shiftOut();\nnormalStateHandler[C0.SI] = (parser, handler) => handler.shiftIn();\nnormalStateHandler[C0.ESC] = (parser, handler) => parser.setState(ParserState.ESCAPED);\n\n// TODO: Remove terminal when parser owns params and currentParam\nconst escapedStateHandler: {[key: string]: (parser: Parser, terminal: any) => void} = {};\nescapedStateHandler['['] = (parser, terminal) => {\n  // ESC [ Control Sequence Introducer (CSI  is 0x9b)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.CSI_PARAM);\n};\nescapedStateHandler[']'] = (parser, terminal) => {\n  // ESC ] Operating System Command (OSC is 0x9d)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.OSC);\n};\nescapedStateHandler['P'] = (parser, terminal) => {\n  // ESC P Device Control String (DCS is 0x90)\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.DCS);\n};\nescapedStateHandler['_'] = (parser, terminal) => {\n  // ESC _ Application Program Command ( APC is 0x9f).\n  parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['^'] = (parser, terminal) => {\n  // ESC ^ Privacy Message ( PM is 0x9e).\n  parser.setState(ParserState.IGNORE);\n};\nescapedStateHandler['c'] = (parser, terminal) => {\n  // ESC c Full Reset (RIS).\n  terminal.reset();\n};\nescapedStateHandler['E'] = (parser, terminal) => {\n  // ESC E Next Line ( NEL is 0x85).\n  terminal.x = 0;\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['D'] = (parser, terminal) => {\n  // ESC D Index ( IND is 0x84).\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['M'] = (parser, terminal) => {\n  // ESC M Reverse Index ( RI is 0x8d).\n  terminal.reverseIndex();\n  parser.setState(ParserState.NORMAL);\n};\nescapedStateHandler['%'] = (parser, terminal) => {\n  // ESC % Select default/utf-8 character set.\n  // @ = default, G = utf-8\n  terminal.setgLevel(0);\n  terminal.setgCharset(0, DEFAULT_CHARSET); // US (default)\n  parser.setState(ParserState.NORMAL);\n  parser.skipNextChar();\n};\nescapedStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\n\nconst csiParamStateHandler: {[key: string]: (parser: Parser) => void} = {};\ncsiParamStateHandler['?'] = (parser) => parser.setPrefix('?');\ncsiParamStateHandler['>'] = (parser) => parser.setPrefix('>');\ncsiParamStateHandler['!'] = (parser) => parser.setPrefix('!');\ncsiParamStateHandler['0'] = (parser) => parser.setParam(parser.getParam() * 10);\ncsiParamStateHandler['1'] = (parser) => parser.setParam(parser.getParam() * 10 + 1);\ncsiParamStateHandler['2'] = (parser) => parser.setParam(parser.getParam() * 10 + 2);\ncsiParamStateHandler['3'] = (parser) => parser.setParam(parser.getParam() * 10 + 3);\ncsiParamStateHandler['4'] = (parser) => parser.setParam(parser.getParam() * 10 + 4);\ncsiParamStateHandler['5'] = (parser) => parser.setParam(parser.getParam() * 10 + 5);\ncsiParamStateHandler['6'] = (parser) => parser.setParam(parser.getParam() * 10 + 6);\ncsiParamStateHandler['7'] = (parser) => parser.setParam(parser.getParam() * 10 + 7);\ncsiParamStateHandler['8'] = (parser) => parser.setParam(parser.getParam() * 10 + 8);\ncsiParamStateHandler['9'] = (parser) => parser.setParam(parser.getParam() * 10 + 9);\ncsiParamStateHandler['$'] = (parser) => parser.setPostfix('$');\ncsiParamStateHandler['\"'] = (parser) => parser.setPostfix('\"');\ncsiParamStateHandler[' '] = (parser) => parser.setPostfix(' ');\ncsiParamStateHandler['\\''] = (parser) => parser.setPostfix('\\'');\ncsiParamStateHandler[';'] = (parser) => parser.finalizeParam();\ncsiParamStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\n\nconst csiStateHandler: {[key: string]: (handler: IInputHandler, params: number[], prefix: string, postfix: string, parser: Parser) => void} = {};\ncsiStateHandler['@'] = (handler, params, prefix) => handler.insertChars(params);\ncsiStateHandler['A'] = (handler, params, prefix) => handler.cursorUp(params);\ncsiStateHandler['B'] = (handler, params, prefix) => handler.cursorDown(params);\ncsiStateHandler['C'] = (handler, params, prefix) => handler.cursorForward(params);\ncsiStateHandler['D'] = (handler, params, prefix) => handler.cursorBackward(params);\ncsiStateHandler['E'] = (handler, params, prefix) => handler.cursorNextLine(params);\ncsiStateHandler['F'] = (handler, params, prefix) => handler.cursorPrecedingLine(params);\ncsiStateHandler['G'] = (handler, params, prefix) => handler.cursorCharAbsolute(params);\ncsiStateHandler['H'] = (handler, params, prefix) => handler.cursorPosition(params);\ncsiStateHandler['I'] = (handler, params, prefix) => handler.cursorForwardTab(params);\ncsiStateHandler['J'] = (handler, params, prefix) => handler.eraseInDisplay(params);\ncsiStateHandler['K'] = (handler, params, prefix) => handler.eraseInLine(params);\ncsiStateHandler['L'] = (handler, params, prefix) => handler.insertLines(params);\ncsiStateHandler['M'] = (handler, params, prefix) => handler.deleteLines(params);\ncsiStateHandler['P'] = (handler, params, prefix) => handler.deleteChars(params);\ncsiStateHandler['S'] = (handler, params, prefix) => handler.scrollUp(params);\ncsiStateHandler['T'] = (handler, params, prefix) => {\n  if (params.length < 2 && !prefix) {\n    handler.scrollDown(params);\n  }\n};\ncsiStateHandler['X'] = (handler, params, prefix) => handler.eraseChars(params);\ncsiStateHandler['Z'] = (handler, params, prefix) => handler.cursorBackwardTab(params);\ncsiStateHandler['`'] = (handler, params, prefix) => handler.charPosAbsolute(params);\ncsiStateHandler['a'] = (handler, params, prefix) => handler.HPositionRelative(params);\ncsiStateHandler['b'] = (handler, params, prefix) => handler.repeatPrecedingCharacter(params);\ncsiStateHandler['c'] = (handler, params, prefix) => handler.sendDeviceAttributes(params);\ncsiStateHandler['d'] = (handler, params, prefix) => handler.linePosAbsolute(params);\ncsiStateHandler['e'] = (handler, params, prefix) => handler.VPositionRelative(params);\ncsiStateHandler['f'] = (handler, params, prefix) => handler.HVPosition(params);\ncsiStateHandler['g'] = (handler, params, prefix) => handler.tabClear(params);\ncsiStateHandler['h'] = (handler, params, prefix) => handler.setMode(params);\ncsiStateHandler['l'] = (handler, params, prefix) => handler.resetMode(params);\ncsiStateHandler['m'] = (handler, params, prefix) => handler.charAttributes(params);\ncsiStateHandler['n'] = (handler, params, prefix) => handler.deviceStatus(params);\ncsiStateHandler['p'] = (handler, params, prefix) => {\n  switch (prefix) {\n    case '!': handler.softReset(params); break;\n  }\n};\ncsiStateHandler['q'] = (handler, params, prefix, postfix) => {\n  if (postfix === ' ') {\n    handler.setCursorStyle(params);\n  }\n};\ncsiStateHandler['r'] = (handler, params) => handler.setScrollRegion(params);\ncsiStateHandler['s'] = (handler, params) => handler.saveCursor(params);\ncsiStateHandler['u'] = (handler, params) => handler.restoreCursor(params);\ncsiStateHandler[C0.CAN] = (handler, params, prefix, postfix, parser) => parser.setState(ParserState.NORMAL);\n\nenum ParserState {\n  NORMAL = 0,\n  ESCAPED = 1,\n  CSI_PARAM = 2,\n  CSI = 3,\n  OSC = 4,\n  CHARSET = 5,\n  DCS = 6,\n  IGNORE = 7\n}\n\n/**\n * The terminal's parser, all input into the terminal goes through the parser\n * which parses and defers the actual input handling the the IInputHandler\n * specified in the constructor.\n */\nexport class Parser {\n  private _state: ParserState;\n  private _position: number;\n\n  // TODO: Remove terminal when handler can do everything\n  constructor(\n    private _inputHandler: IInputHandler,\n    private _terminal: any\n  ) {\n    this._state = ParserState.NORMAL;\n  }\n\n  /**\n   * Parse and handle data.\n   *\n   * @param data The data to parse.\n   */\n  public parse(data: string): ParserState {\n    let l = data.length, j, cs, ch, code, low;\n\n    this._position = 0;\n    // apply leftover surrogate high from last write\n    if (this._terminal.surrogate_high) {\n      data = this._terminal.surrogate_high + data;\n      this._terminal.surrogate_high = '';\n    }\n\n    for (; this._position < l; this._position++) {\n      ch = data[this._position];\n\n      // FIXME: higher chars than 0xa0 are not allowed in escape sequences\n      //        --> maybe move to default\n      code = data.charCodeAt(this._position);\n      if (0xD800 <= code && code <= 0xDBFF) {\n        // we got a surrogate high\n        // get surrogate low (next 2 bytes)\n        low = data.charCodeAt(this._position + 1);\n        if (isNaN(low)) {\n          // end of data stream, save surrogate high\n          this._terminal.surrogate_high = ch;\n          continue;\n        }\n        code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n        ch += data.charAt(this._position + 1);\n      }\n      // surrogate low - already handled above\n      if (0xDC00 <= code && code <= 0xDFFF)\n        continue;\n\n      switch (this._state) {\n        case ParserState.NORMAL:\n          if (ch in normalStateHandler) {\n            normalStateHandler[ch](this, this._inputHandler);\n          } else {\n            this._inputHandler.addChar(ch, code);\n          }\n          break;\n        case ParserState.ESCAPED:\n          if (ch in escapedStateHandler) {\n            escapedStateHandler[ch](this, this._terminal);\n            // Skip switch as it was just handled\n            break;\n          }\n          switch (ch) {\n\n            // ESC (,),*,+,-,. Designate G0-G2 Character Set.\n            case '(': // <-- this seems to get all the attention\n            case ')':\n            case '*':\n            case '+':\n            case '-':\n            case '.':\n              switch (ch) {\n                case '(':\n                  this._terminal.gcharset = 0;\n                  break;\n                case ')':\n                  this._terminal.gcharset = 1;\n                  break;\n                case '*':\n                  this._terminal.gcharset = 2;\n                  break;\n                case '+':\n                  this._terminal.gcharset = 3;\n                  break;\n                case '-':\n                  this._terminal.gcharset = 1;\n                  break;\n                case '.':\n                  this._terminal.gcharset = 2;\n                  break;\n              }\n              this._state = ParserState.CHARSET;\n              break;\n\n            // Designate G3 Character Set (VT300).\n            // A = ISO Latin-1 Supplemental.\n            // Not implemented.\n            case '/':\n              this._terminal.gcharset = 3;\n              this._state = ParserState.CHARSET;\n              this._position--;\n              break;\n\n            // ESC N\n            // Single Shift Select of G2 Character Set\n            // ( SS2 is 0x8e). This affects next character only.\n            case 'N':\n              break;\n            // ESC O\n            // Single Shift Select of G3 Character Set\n            // ( SS3 is 0x8f). This affects next character only.\n            case 'O':\n              break;\n            // ESC n\n            // Invoke the G2 Character Set as GL (LS2).\n            case 'n':\n              this._terminal.setgLevel(2);\n              break;\n            // ESC o\n            // Invoke the G3 Character Set as GL (LS3).\n            case 'o':\n              this._terminal.setgLevel(3);\n              break;\n            // ESC |\n            // Invoke the G3 Character Set as GR (LS3R).\n            case '|':\n              this._terminal.setgLevel(3);\n              break;\n            // ESC }\n            // Invoke the G2 Character Set as GR (LS2R).\n            case '}':\n              this._terminal.setgLevel(2);\n              break;\n            // ESC ~\n            // Invoke the G1 Character Set as GR (LS1R).\n            case '~':\n              this._terminal.setgLevel(1);\n              break;\n\n            // ESC 7 Save Cursor (DECSC).\n            case '7':\n              this._inputHandler.saveCursor();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC 8 Restore Cursor (DECRC).\n            case '8':\n              this._inputHandler.restoreCursor();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC # 3 DEC line height/width\n            case '#':\n              this._state = ParserState.NORMAL;\n              this._position++;\n              break;\n\n            // ESC H Tab Set (HTS is 0x88).\n            case 'H':\n              this._terminal.tabSet();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC = Application Keypad (DECKPAM).\n            case '=':\n              this._terminal.log('Serial port requested application keypad.');\n              this._terminal.applicationKeypad = true;\n              this._terminal.viewport.syncScrollArea();\n              this._state = ParserState.NORMAL;\n              break;\n\n            // ESC > Normal Keypad (DECKPNM).\n            case '>':\n              this._terminal.log('Switching back to normal keypad.');\n              this._terminal.applicationKeypad = false;\n              this._terminal.viewport.syncScrollArea();\n              this._state = ParserState.NORMAL;\n              break;\n\n            default:\n              this._state = ParserState.NORMAL;\n              this._terminal.error('Unknown ESC control: %s.', ch);\n              break;\n          }\n          break;\n\n        case ParserState.CHARSET:\n          if (ch in CHARSETS) {\n            cs = CHARSETS[ch];\n            if (ch === '/') { // ISOLatin is actually /A\n              this.skipNextChar();\n            }\n          } else {\n            cs = DEFAULT_CHARSET;\n          }\n          this._terminal.setgCharset(this._terminal.gcharset, cs);\n          this._terminal.gcharset = null;\n          this._state = ParserState.NORMAL;\n          break;\n\n        case ParserState.OSC:\n          // OSC Ps ; Pt ST\n          // OSC Ps ; Pt BEL\n          //   Set Text Parameters.\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n\n            this._terminal.params.push(this._terminal.currentParam);\n\n            switch (this._terminal.params[0]) {\n              case 0:\n              case 1:\n              case 2:\n                if (this._terminal.params[1]) {\n                  this._terminal.title = this._terminal.params[1];\n                  this._terminal.handleTitle(this._terminal.title);\n                }\n                break;\n              case 3:\n                // set X property\n                break;\n              case 4:\n              case 5:\n                // change dynamic colors\n                break;\n              case 10:\n              case 11:\n              case 12:\n              case 13:\n              case 14:\n              case 15:\n              case 16:\n              case 17:\n              case 18:\n              case 19:\n                // change dynamic ui colors\n                break;\n              case 46:\n                // change log file\n                break;\n              case 50:\n                // dynamic font\n                break;\n              case 51:\n                // emacs shell\n                break;\n              case 52:\n                // manipulate selection data\n                break;\n              case 104:\n              case 105:\n              case 110:\n              case 111:\n              case 112:\n              case 113:\n              case 114:\n              case 115:\n              case 116:\n              case 117:\n              case 118:\n                // reset colors\n                break;\n            }\n\n            this._terminal.params = [];\n            this._terminal.currentParam = 0;\n            this._state = ParserState.NORMAL;\n          } else {\n            if (!this._terminal.params.length) {\n              if (ch >= '0' && ch <= '9') {\n                this._terminal.currentParam =\n                  this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\n              } else if (ch === ';') {\n                this._terminal.params.push(this._terminal.currentParam);\n                this._terminal.currentParam = '';\n              }\n            } else {\n              this._terminal.currentParam += ch;\n            }\n          }\n          break;\n\n        case ParserState.CSI_PARAM:\n          if (ch in csiParamStateHandler) {\n            csiParamStateHandler[ch](this);\n            break;\n          }\n          this.finalizeParam();\n          // Fall through the CSI as this character should be the CSI code.\n          this._state = ParserState.CSI;\n\n        case ParserState.CSI:\n          if (ch in csiStateHandler) {\n            csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\n          } else {\n            this._terminal.error('Unknown CSI code: %s.', ch);\n          }\n\n          this._state = ParserState.NORMAL;\n          this._terminal.prefix = '';\n          this._terminal.postfix = '';\n          break;\n\n        case ParserState.DCS:\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n            let pt;\n            let valid: boolean;\n\n            switch (this._terminal.prefix) {\n              // User-Defined Keys (DECUDK).\n              case '':\n                break;\n\n              // Request Status String (DECRQSS).\n              // test: echo -e '\\eP$q\"p\\e\\\\'\n              case '$q':\n                pt = this._terminal.currentParam;\n                valid = false;\n\n                switch (pt) {\n                  // DECSCA\n                  case '\"q':\n                    pt = '0\"q';\n                    break;\n\n                  // DECSCL\n                  case '\"p':\n                    pt = '61\"p';\n                    break;\n\n                  // DECSTBM\n                  case 'r':\n                    pt = ''\n                      + (this._terminal.scrollTop + 1)\n                      + ';'\n                      + (this._terminal.scrollBottom + 1)\n                      + 'r';\n                    break;\n\n                  // SGR\n                  case 'm':\n                    pt = '0m';\n                    break;\n\n                  default:\n                    this._terminal.error('Unknown DCS Pt: %s.', pt);\n                    pt = '';\n                    break;\n                }\n\n                this._terminal.send(C0.ESC + 'P' + +valid + '$r' + pt + C0.ESC + '\\\\');\n                break;\n\n              // Set Termcap/Terminfo Data (xterm, experimental).\n              case '+p':\n                break;\n\n              // Request Termcap/Terminfo String (xterm, experimental)\n              // Regular xterm does not even respond to this sequence.\n              // This can cause a small glitch in vim.\n              // test: echo -ne '\\eP+q6b64\\e\\\\'\n              case '+q':\n                pt = this._terminal.currentParam;\n                valid = false;\n\n                this._terminal.send(C0.ESC + 'P' + +valid + '+r' + pt + C0.ESC + '\\\\');\n                break;\n\n              default:\n                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\n                break;\n            }\n\n            this._terminal.currentParam = 0;\n            this._terminal.prefix = '';\n            this._state = ParserState.NORMAL;\n          } else if (!this._terminal.currentParam) {\n            if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\n              this._terminal.currentParam = ch;\n            } else if (this._terminal.prefix.length === 2) {\n              this._terminal.currentParam = ch;\n            } else {\n              this._terminal.prefix += ch;\n            }\n          } else {\n            this._terminal.currentParam += ch;\n          }\n          break;\n\n        case ParserState.IGNORE:\n          // For PM and APC.\n          if (ch === C0.ESC || ch === C0.BEL) {\n            if (ch === C0.ESC) this._position++;\n            this._state = ParserState.NORMAL;\n          }\n          break;\n      }\n    }\n    return this._state;\n  }\n\n  /**\n   * Set the parser's current parsing state.\n   *\n   * @param state The new state.\n   */\n  public setState(state: ParserState): void {\n    this._state = state;\n  }\n\n  /**\n   * Sets the parsier's current prefix. CSI codes can have prefixes of '?', '>'\n   * or '!'.\n   *\n   * @param prefix The prefix.\n   */\n  public setPrefix(prefix: string): void {\n    this._terminal.prefix = prefix;\n  }\n\n  /**\n   * Sets the parsier's current prefix. CSI codes can have postfixes of '$',\n   * '\"', ' ', '\\''.\n   *\n   * @param postfix The postfix.\n   */\n  public setPostfix(postfix: string): void {\n    this._terminal.postfix = postfix;\n  }\n\n  /**\n   * Sets the parser's current parameter.\n   *\n   * @param param the parameter.\n   */\n  public setParam(param: number) {\n    this._terminal.currentParam = param;\n  }\n\n  /**\n   * Gets the parser's current parameter.\n   */\n  public getParam(): number {\n    return this._terminal.currentParam;\n  }\n\n  /**\n   * Finalizes the parser's current parameter, adding it to the list of\n   * parameters and setting the new current parameter to 0.\n   */\n  public finalizeParam(): void {\n    this._terminal.params.push(this._terminal.currentParam);\n    this._terminal.currentParam = 0;\n  }\n\n  /**\n   * Tell the parser to skip the next character.\n   */\n  public skipNextChar(): void {\n    this._position++;\n  }\n\n  /**\n   * Tell the parser to repeat parsing the current character (for example if it\n   * needs parsing using a different state.\n   */\n  // public repeatChar(): void {\n  //   this._position--;\n  // }\n}\n"]}},"error":null,"hash":"b49e2887f7d06904e64f2b03c2d3af32","cacheData":{"env":{}}}